plugins {
    id 'fabric-loom' // version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}
apply plugin: "com.github.johnrengelman.shadow"

archivesBaseName = getArtifactID("fabric")

configurations {
    shade
    implementation.extendsFrom shade
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        datagen {
            client()
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${modID}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
        }

        configureEach {
            runDir "Fabric/run"
            ideConfigGenerated(true)
        }
    }
}

repositories {
    maven { url "https://libraries.minecraft.net" }
    // paucal
    maven { url "https://maven.blamejared.com" }
    // emi
    maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.officialMojangMappings()

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: findBugsVersion

    compileOnly project(":Xplat")
    shade "org.asciidoctor:asciidoctorj:${asciiDoctorJVersion}"

    modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"

    modImplementation "at.petra-k.paucal:paucal-fabric-$minecraftVersion:$paucalVersion"
    // which requires fiber
    // i don't know why it's not included
    modImplementation "me.zeroeightsix:fiber:$fiberVersion"

    modImplementation "dev.emi:emi:${emiVersion}"

//    testCompileOnly "org.asciidoctor:asciidoctorj:${asciiDoctorJVersion}"
}

sourceSets {
    main.resources.srcDirs += ['src/generated/resources', '../Xplat/src/generated/resources']
}

tasks.withType(JavaCompile) {
    source(project(":Xplat").sourceSets.main.allSource)
}

processResources {
    from project(":Xplat").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

setupJar(this)
jar.archiveClassifier = 'slim'

shadowJar {
    archiveClassifier = 'shadow'
    configurations = [project.configurations.shade]
    relocate 'org.asciidoctor', "at.petrak.relocated.asciidoctor"
}

remapJar {
    dependsOn(shadowJar)
    inputFile.set(shadowJar.archiveFile)
    archiveClassifier = ''

    from rootProject.file("LICENSE.md")
}